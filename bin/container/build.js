const path = require("path");
const fs = require("fs");
const { Project, SyntaxKind } = require("ts-morph");


const srcDir = path.resolve(__dirname, "../../src");
const project = new Project({
  tsConfigFilePath: path.resolve(__dirname, "../../tsconfig.json"),
});

function findInjectables(dir) {
  const results = [];

  function walk(currentPath) {
    const files = fs.readdirSync(currentPath);

    for (const file of files) {
      const fullPath = path.join(currentPath, file);

      if (fs.statSync(fullPath).isDirectory()) {
        if (file.endsWith('tests') || file.endsWith('test')) {

        } else {
          walk(fullPath);
        }
        
      } else if (file.endsWith(".ts") && !file.endsWith(".d.ts")) {
        const sourceFile = project.addSourceFileAtPath(fullPath);
        const classes = sourceFile.getClasses();

        for (const cls of classes) {
          const decorators = cls.getDecorators();
          const hasInjectable = decorators.some(decorator => decorator.getName() === "injectable");

          if (hasInjectable && cls.isExported()) {
            const relativePath = path.relative(path.resolve(__dirname, "../"), fullPath);
            const noExtPath = relativePath.replace(/\.ts$/, "");
            results.push({
              className: cls.getName(),
              filePath: noExtPath.replace(/\\/g, "/"), // Normalize Windows paths
            });
          }
        }
      }
    }
  }

  walk(dir);
  return results;
}

let contents = '/**\n'
contents += ` * This file is auto-generated by executing "npm run container:build"\n`
contents += ` * If you update this file, it will be overwritten.\n`
contents += ` * @since ${(new Date(Date.now())).toISOString()}\n`
contents += ` */\n`

const injectables = findInjectables(srcDir);
for (let i = 0; i < injectables.length; i++) {
  const injectable = injectables[i]
  const filePath = injectable.filePath.replace('../../src', '.')
  contents += `import { ${injectable.className} } from "${filePath}";\n`
}
contents += `import { Application } from "./core/application";`

contents += `\n\n`
for (let i = 0; i < injectables.length; i++) {
  const injectable = injectables[i]
  contents += `Application.container().bind(${injectable.className}).toSelf();\n`
}

fs.writeFileSync(`${srcDir}/bindings.ts`, contents)

