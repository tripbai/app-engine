/**
 * This file was auto-generated by executing "npm run lambda:build --env=$ENV"
 * If you update this file, it will be overwritten.
 * @since 2025-06-03T13:46:34.494Z
 */
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import { router } from './dist/core/services/lambda/lambda-router.js';
import { LambdaRoutesRegistry } from './dist/core/services/lambda/lambda-routes-registry.js';
import { Application } from './dist/core/application.js';
import { AppENV } from './dist/core/helpers/env.js';
import { AppAuthController } from "./dist/core/auth/controllers/app-auth.controller.js";
import { AppInfoController } from "./dist/core/auth/controllers/app-info.controller.js";
import { AppAuthService } from "./dist/core/auth/services/app-auth-service.js";
import { NativeRBACService } from "./dist/core/providers/authorization/rbac/rbac.service.js";
import { RedisCacheService } from "./dist/core/providers/cache/redis/redis.service.js";
import { FirestoreHelper } from "./dist/core/providers/database/firestore/firestore.helper.js";
import { FirestoreService } from "./dist/core/providers/database/firestore/firestore.service.js";
import { MySqlTransactionHelper } from "./dist/core/providers/database/mysql/mysql-transaction.helper.js";
import { MySqlService } from "./dist/core/providers/database/mysql/mysql.service.js";
import { KryptodocIndexerService } from "./dist/core/providers/indexer/kryptodoc/kryptodoc-indexer.service.js";
import { JsonWebToken } from "./dist/core/providers/jwt/jsonwebtoken/json-web-token.service.js";
import { AmazonSNSTopicPublisherService } from "./dist/core/providers/topics/awsns/awsns-topic-publisher.service.js";
import { Notif8701TopicPublisher } from "./dist/core/providers/topics/notif8701/notif8701-topic-publisher.service.js";
import { RequesterIdentityFactory } from "./dist/core/requester/requester-identity.factory.js";
import { RequesterIdentityMiddleware } from "./dist/core/requester/requester-identity.middleware.js";
import { RequesterTokenService } from "./dist/core/requester/requester-token.service.js";
import { ProxyRouter } from "./dist/core/router/proxy-router.js";
import { AWSEnvCredentials } from "./dist/core/services/aws/aws-env-credentials.js";
import { AmazonS3Service } from "./dist/core/services/aws/s3/aws3.service.js";
import { AmazonSNSService } from "./dist/core/services/aws/sns/awsns.service.js";
import { AxiosService } from "./dist/core/services/axios/axios.service.js";
import { EntityCertifier } from "./dist/core/services/entity-certifier/entity-certifier.service.js";
import { FirebaseEnvBasedProjectService } from "./dist/core/services/firebase/firebase-env-based-project.service.js";
import { GoogleUserInfoService } from "./dist/core/services/google/api/google-user-info.service.js";
import { GoogleReCAPTCHAService } from "./dist/core/services/google/apps/recaptcha.service.js";
import { MySqlPoolService } from "./dist/core/services/mysql/mysql-pool-service.js";
import { PermissionTokenValidator } from "./dist/core/services/rbac/permission-token.validator.js";
import { PermissionManager } from "./dist/core/services/rbac/permissions.manager.js";


const __filename = fileURLToPath(import.meta.url)
const rootDir = dirname(__filename)
Application.boot()
Application.root(rootDir)
Application.environment('development')
AppENV.set('APP_KEY',"L3PG65VenOcRuwhqPf4QCUOSZqOftwf8")
AppENV.set('SECRET_KEY',"zmV0M1q30FM0sGw7eASce7RuuyAnYOHU")
AppENV.set('JWT_SECRET',"gVpjkAZl9gr49iKcfZfmSyWYEKiDvpApdevelopment")
AppENV.set('APPLICATION_NAME',"tripbai/mailman")
AppENV.set('APPLICATION_BUILD',"Tue Jun 03 2025 21:46:34 GMT+0800 (Philippine Standard Time)")
Application.container().bind(AppAuthController).toSelf();
Application.container().bind(AppInfoController).toSelf();
Application.container().bind(AppAuthService).toSelf();
Application.container().bind(NativeRBACService).toSelf();
Application.container().bind(RedisCacheService).toSelf();
Application.container().bind(FirestoreHelper).toSelf();
Application.container().bind(FirestoreService).toSelf();
Application.container().bind(MySqlTransactionHelper).toSelf();
Application.container().bind(MySqlService).toSelf();
Application.container().bind(KryptodocIndexerService).toSelf();
Application.container().bind(JsonWebToken).toSelf();
Application.container().bind(AmazonSNSTopicPublisherService).toSelf();
Application.container().bind(Notif8701TopicPublisher).toSelf();
Application.container().bind(RequesterIdentityFactory).toSelf();
Application.container().bind(RequesterIdentityMiddleware).toSelf();
Application.container().bind(RequesterTokenService).toSelf();
Application.container().bind(ProxyRouter).toSelf();
Application.container().bind(AWSEnvCredentials).toSelf();
Application.container().bind(AmazonS3Service).toSelf();
Application.container().bind(AmazonSNSService).toSelf();
Application.container().bind(AxiosService).toSelf();
Application.container().bind(EntityCertifier).toSelf();
Application.container().bind(FirebaseEnvBasedProjectService).toSelf();
Application.container().bind(GoogleUserInfoService).toSelf();
Application.container().bind(GoogleReCAPTCHAService).toSelf();
Application.container().bind(MySqlPoolService).toSelf();
Application.container().bind(PermissionTokenValidator).toSelf();
Application.container().bind(PermissionManager).toSelf();


Application.route().forEach(routeConfig => {
  const Controller = Application.container().get(routeConfig.Controller)
  LambdaRoutesRegistry.register(
    routeConfig.method,
    routeConfig.path,
    async (data) => {
      return await Controller[routeConfig.handler](data)
    }
  )
})


export const handler = async (event) => {
  try {
    const response = await router(event)
    return {
      statusCode: response.code,
      body: JSON.stringify(response.data)
    }
  } catch (error) {
    return {
      statusCode: error.code ?? 500,
      body: JSON.stringify({ error: error.message ?? 'unknown exception' }),
    }
  }
}
